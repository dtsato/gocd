/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

describe('Plugin Config Action Buttons', () => {

  const m             = require('mithril');
  const _             = require('lodash');
  const ActionButtons = require('views/shared/action_buttons');
  const simulateEvent = require('simulate-event');

  const unmount = () => {
    m.mount(root, null);
    m.redraw();
  };

  let $root, root;

  beforeEach(() => {
    [$root, root] = window.createDomElementForTest();
  });

  afterEach(() => {
    unmount();
    window.destroyDomElementForTest();
  });

  it('should render action buttons', () => {
    m.mount(root,
      {
        view() {
          return m(ActionButtons);
        }
      }
    );
    m.redraw();

    expect($root.find('.plugin-actions .edit-button')).toBeInDOM();
    expect($root.find('.plugin-actions .clone-button')).toBeInDOM();
    expect($root.find('.plugin-actions .delete-button')).toBeInDOM();
  });

  it('should disable edit and clone buttons and show title', () => {
    m.mount(root,
      {
        view() {
          return m(ActionButtons, {disabled: true, title: 'Plugin not found'});
        }
      }
    );
    m.redraw();

    expect($root.find('.plugin-actions .edit-button')).toHaveClass('disabled');
    expect($root.find('.plugin-actions .clone-button')).toHaveClass('disabled');
    expect($root.find('.plugin-actions .delete-button')).not.toHaveClass('disabled');

    expect($root.find('.plugin-actions .edit-button')).toHaveAttr('title', 'Plugin not found');
    expect($root.find('.plugin-actions .clone-button')).toHaveAttr('title', 'Plugin not found');
    expect($root.find('.plugin-actions .delete-button')).not.toHaveAttr('title');
  });

  it('should trigger actions on click', () => {
    const editAction   = jasmine.createSpy();
    const cloneAction  = jasmine.createSpy();
    const deleteAction = jasmine.createSpy();

    m.mount(root,
      {
        view() {
          return m(ActionButtons, {onEdit: editAction, onClone: cloneAction, onDelete: deleteAction});
        }
      }
    );
    m.redraw();

    simulateEvent.simulate($root.find('.edit-button').get(0), 'click');
    expect(editAction).toHaveBeenCalled();
    expect(cloneAction).not.toHaveBeenCalled();
    expect(deleteAction).not.toHaveBeenCalled();
    resetSpies([editAction, cloneAction, deleteAction]);

    simulateEvent.simulate($root.find('.clone-button').get(0), 'click');
    expect(editAction).not.toHaveBeenCalled();
    expect(cloneAction).toHaveBeenCalled();
    expect(deleteAction).not.toHaveBeenCalled();
    resetSpies([editAction, cloneAction, deleteAction]);

    simulateEvent.simulate($root.find('.delete-button').get(0), 'click');
    expect(editAction).not.toHaveBeenCalled();
    expect(cloneAction).not.toHaveBeenCalled();
    expect(deleteAction).toHaveBeenCalled();
  });

  it('should not trigger edit and clone when disabled', () => {
    const action = jasmine.createSpy();
    m.mount(root,
      {
        view() {
          return m(ActionButtons, {disabled: true, onEdit: action, onClone: action, onDelete: action});
        }
      }
    );
    m.redraw();

    simulateEvent.simulate($root.find('.edit-button').get(0), 'click');
    simulateEvent.simulate($root.find('.clone-button').get(0), 'click');
    expect(action).not.toHaveBeenCalled();

    simulateEvent.simulate($root.find('.delete-button').get(0), 'click');
    expect(action).toHaveBeenCalled();
  });

  function resetSpies(spies) {
    _.forEach(spies, (spy) => spy.calls.reset());
  }
});
