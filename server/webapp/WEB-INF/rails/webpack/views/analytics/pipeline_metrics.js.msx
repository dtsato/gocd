/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function () {
  "use strict";

  const m = require("mithril");
  const $ = require("jquery");
  const _ = require('lodash');
  const f = require("helpers/form_helper");

  const Interactions = require("models/shared/analytics_interaction_manager");
  const Models       = Interactions.ensure().ns("PipelineMetrics");
  const init         = require("rails-shared/plugin-endpoint").init;

  const AnalyticsiFrameWidget = require('views/shared/analytics_iframe_widget');

  function pipelineParams(pipeline) {
    return {pipeline_name: pipeline, context: "dashboard"}; // eslint-disable-line camelcase
  }

  let currentPipeline = null;

  const PipelineDropdown = {
    oninit(vnode) {
      if (!currentPipeline) {
        currentPipeline = vnode.attrs.pipelines[0];
      }
    },

    view(vnode) {
      const pipelineOptions = _.map(vnode.attrs.pipelines, (pipeline) => {
        return <option selected={pipeline === currentPipeline}>{pipeline}</option>;
      });

      const select = m("select", {
        onchange() {
          currentPipeline = $(this).val();
          $.each(Models.all(), (uid, m) => {
            m.url(Models.toUrl(uid, pipelineParams(currentPipeline)));
          });
        }
      }, pipelineOptions);

      return <div class="chart-pipeline-selector">Analytics For Pipeline: {select}</div>;
    }
  };

  const PipelineMetrics = {
    oninit(vnode) {
      if (!currentPipeline) {
        currentPipeline = vnode.attrs.pipelines[0];
      }
    },

    view(vnode) {
      const elements = [<PipelineDropdown pipelines={vnode.attrs.pipelines}/>];

      $.each(vnode.attrs.metrics, (pluginId, supportedAnalytics) => {
        $.each(supportedAnalytics, (idx, sa) => {
          const uid   = Models.uid(idx, pluginId, sa.type, sa.id),
                title = sa.title,
                model = Models.modelFor(uid, pipelineParams(currentPipeline));

          elements.push(m(AnalyticsiFrameWidget, {model, pluginId, uid, title, init}));
        });
      });

      if (elements.length === 1) { // check for length 1, as the pipeline dropdown has already been added
        return (<div class="message">
          <f.callout type="info">No analytics plugin supports pipeline analytics.</f.callout>
        </div>);
      }

      return elements;
    }
  };

  module.exports = PipelineMetrics;

})();
