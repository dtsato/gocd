/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const _ = require('lodash');
const m = require('mithril');

const Interactions                 = require("models/shared/analytics_interaction_manager");
const Models                       = Interactions.ensure().ns("AgentMetrics");
const PluginEndpoint               = require('rails-shared/plugin-endpoint');
const Modal                        = require('views/shared/new_modal');
const AnalyticsiFrameWidget        = require('views/shared/analytics_iframe_widget');
const PluginEndpointRequestHandler = require('rails-shared/plugin-endpoint-request-handler');

function createModel(index, pluginId, metric, agent) {
  const uid    = Models.uid(index, pluginId, "agent", metric),
        model  = Models.modelFor(uid),
        params = {
          'agent_uuid':     agent.uuid(),
          'agent_hostname': agent.hostname(),
          key:              "analytics.agent-chart"
        };

  model.url(Models.toUrl(uid, params));

  model.uid      = uid;
  model.pluginId = pluginId;
  model.title    = metric.title;

  return model;
}

function createModal(supportedAnalytics, agent) {
  PluginEndpointRequestHandler.defineLinkHandler();
  PluginEndpoint.ensure("v1");

  const models = [];
  _.each(supportedAnalytics, (agentAnalytics, pluginId) => {
    _.each(agentAnalytics, (metric, i) => {
      models.push(createModel(i, pluginId, metric, agent));
    });
  });

  const modal = new Modal({
    size:    "analytics-modal",
    title:   `Analytics for agent: ${agent.hostname()}`,
    body:    () => models.map((model) => m(AnalyticsiFrameWidget, {
      model,
      pluginId: model.pluginId,
      title:    model.title,
      uid:      model.uid,
      init:     PluginEndpoint.init
    })),
    onclose: () => modal.destroy(),
    buttons: []
  });
  modal.render();
}


const AgentAnalyticsWidget = {
  view: (vnode) => {
    return m("a", {
      class:   "agent-analytics",
      onclick: () => {
        createModal(vnode.attrs.supportedAnalytics, vnode.attrs.agent);
      }
    });
  }
};

module.exports = AgentAnalyticsWidget;
